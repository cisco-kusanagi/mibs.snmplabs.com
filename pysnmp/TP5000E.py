#
# PySNMP MIB module TP5000E (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/neermitt/Dev/kusanagi/mibs.snmplabs.com/asn1/TP5000E
# Produced by pysmi-0.3.4 at Tue Jul 30 11:34:34 2019
# On host NEERMITT-M-J0NV platform Darwin version 18.6.0 by user neermitt
# Using Python version 3.7.4 (default, Jul  9 2019, 18:13:23) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, ifNumber = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifNumber")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, IpAddress, Counter32, NotificationType, TimeTicks, iso, Unsigned32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, ModuleIdentity, Gauge32, snmpModules = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Counter32", "NotificationType", "TimeTicks", "iso", "Unsigned32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "ModuleIdentity", "Gauge32", "snmpModules")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
TP5000MODULEID, ACTIONONLY, symmDeviceDependent, YESVALUETYPE, EnableValue, ONVALUETYPE = mibBuilder.importSymbols("SYMM-COMMON-SMI", "TP5000MODULEID", "ACTIONONLY", "symmDeviceDependent", "YESVALUETYPE", "EnableValue", "ONVALUETYPE")
tp5000e = ModuleIdentity((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1))
tp5000e.setRevisions(('2018-03-22 04:37',))
if mibBuilder.loadTexts: tp5000e.setLastUpdated('201803220437Z')
if mibBuilder.loadTexts: tp5000e.setOrganization('Symmetricom')
class TP5000LEDID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("bta", 1), ("btb", 2), ("sys", 3), ("alm", 4), ("gpsOrGnss", 5), ("mgmt", 6), ("act", 7), ("alarm", 8), ("eth1", 9), ("eth2", 10), ("holdover", 11), ("ref", 12), ("pwra", 13), ("pwrb", 14), ("shelfPower", 15), ("shelfBatA", 16), ("shelfBatB", 17), ("shelfAlarm", 18), ("shelfMgmt", 19), ("shelfRef", 20))

class TP5000LEDTYPE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("off", 0), ("on", 1), ("red", 2), ("redblink", 3), ("green", 4), ("greenblink", 5), ("amber", 6), ("amberblink", 7))

class ALARMLEVELTYPE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5))
    namedValues = NamedValues(("clear", 0), ("critical", 2), ("major", 3), ("minor", 4), ("event", 5))

class TP5000IOCPORTID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 5))
    namedValues = NamedValues(("eth1", 1), ("eth2", 2), ("none", 5))

class TP5000IMAGEACTIVE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

class TP5000INTRAIPSET(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("setA", 0), ("setB", 1), ("setC", 2))

class TP5000PACKETSERVICE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ptpGM", 1), ("ptpProbe", 2), ("ntpServer", 3), ("ntpProbe", 4))

class TP5000SSMOPTION(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("option1", 1), ("option2", 2))

class TP5000REFQUALIFICATION(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("disable", 0), ("qualified", 1), ("disqualified", 2), ("selected", 3))

class TP5000REFTIMINGMODE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("time", 1), ("frequency", 2))

class TP5000REFSELECTMODE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("manual", 1), ("priority", 2), ("ssm", 3))

class TP5000SERVOCTL(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("warmup", 1), ("freerun", 2), ("fasttrack", 3), ("normaltrack", 4), ("holdover", 5), ("bridge", 6), ("fail", 7), ("offline", 8), ("extHoldover", 9), ("localFreerun", 10), ("localHoldover", 11))

class TP5000TRANSIENT(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("stateEvent", 0), ("transientEvent", 1))

class TP5000IOPORTID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("none", 5))

class TP5000IOTYPE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("input", 1), ("output", 2))

class TP5000SSMVALUE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 15)

class DateAndTime(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2d-1d-1d,1d:1d:1d.1d,1a1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class TLatAndLon(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1a1d:1d:1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

class TAntHeight(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1a2d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class TLocalTimeOffset(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1a1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class TSsm(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

tp5000eSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1))
tp5000eLedTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 1), )
if mibBuilder.loadTexts: tp5000eLedTable.setStatus('current')
tp5000eLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eLedID"))
if mibBuilder.loadTexts: tp5000eLedEntry.setStatus('current')
tp5000eLedID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 1, 1, 1), TP5000LEDID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eLedID.setStatus('current')
tp5000eLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 1, 1, 2), TP5000LEDTYPE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eLedStatus.setStatus('current')
tp5000eHWStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 2), )
if mibBuilder.loadTexts: tp5000eHWStatusTable.setStatus('current')
tp5000eHWStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eHWStatusIndex"))
if mibBuilder.loadTexts: tp5000eHWStatusEntry.setStatus('current')
tp5000eHWStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eHWStatusIndex.setStatus('current')
tp5000eHWStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eHWStatusInfo.setStatus('current')
tp5000eModUpTimeTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 3), )
if mibBuilder.loadTexts: tp5000eModUpTimeTable.setStatus('current')
tp5000eModUpTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eModUpTimeIndex"))
if mibBuilder.loadTexts: tp5000eModUpTimeEntry.setStatus('current')
tp5000eModUpTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eModUpTimeIndex.setStatus('current')
tp5000eModuleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eModuleUpTime.setStatus('current')
tp5000eModWarmUpTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 4), )
if mibBuilder.loadTexts: tp5000eModWarmUpTable.setStatus('current')
tp5000eModWarmUpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eModWarmUpIndex"))
if mibBuilder.loadTexts: tp5000eModWarmUpEntry.setStatus('current')
tp5000eModWarmUpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eModWarmUpIndex.setStatus('current')
tp5000eModWarmUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eModWarmUpStatus.setStatus('current')
tp5000eModStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 5), )
if mibBuilder.loadTexts: tp5000eModStatusTable.setStatus('current')
tp5000eModStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eModStatusIndex"))
if mibBuilder.loadTexts: tp5000eModStatusEntry.setStatus('current')
tp5000eModStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eModStatusIndex.setStatus('current')
tp5000eModStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eModStatusInfo.setStatus('current')
tp5000eAlarmAndEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2))
tp5000eActAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1), )
if mibBuilder.loadTexts: tp5000eActAlarmTable.setStatus('current')
tp5000eActAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1), ).setIndexNames((0, "TP5000E", "tp5000eActAlarmIndex"))
if mibBuilder.loadTexts: tp5000eActAlarmEntry.setStatus('current')
tp5000eActAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmIndex.setStatus('current')
tp5000eActAlarmModID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 2), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmModID.setStatus('current')
tp5000eActAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmID.setStatus('current')
tp5000eActAlarmInternalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmInternalIndex.setStatus('current')
tp5000eActAlarmDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmDateTime.setStatus('current')
tp5000eActAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 6), ALARMLEVELTYPE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmSeverity.setStatus('current')
tp5000eActAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActAlarmDesc.setStatus('current')
tp5000eActEventTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2), )
if mibBuilder.loadTexts: tp5000eActEventTable.setStatus('current')
tp5000eActEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1), ).setIndexNames((0, "TP5000E", "tp5000eActEventIndex"))
if mibBuilder.loadTexts: tp5000eActEventEntry.setStatus('current')
tp5000eActEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActEventIndex.setStatus('current')
tp5000eActEventModID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1, 2), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActEventModID.setStatus('current')
tp5000eActEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActEventID.setStatus('current')
tp5000eActEventInternlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActEventInternlIndex.setStatus('current')
tp5000eActEventDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActEventDateTime.setStatus('current')
tp5000eActEventDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eActEventDesc.setStatus('current')
tp5000eAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3), )
if mibBuilder.loadTexts: tp5000eAlarmConfigTable.setStatus('current')
tp5000eAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1), ).setIndexNames((0, "TP5000E", "tp5000eAlarmConfigIndex"))
if mibBuilder.loadTexts: tp5000eAlarmConfigEntry.setStatus('current')
tp5000eAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eAlarmConfigIndex.setStatus('current')
tp5000eAlarmConfigAID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eAlarmConfigAID.setStatus('current')
tp5000eAlarmLevelSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1, 3), ALARMLEVELTYPE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eAlarmLevelSetting.setStatus('current')
tp5000eAlarmSettingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1, 4), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eAlarmSettingDelay.setStatus('current')
tp5000eEnableAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1, 5), EnableValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eEnableAlarmState.setStatus('current')
tp5000eAlarmConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eAlarmConfigDesc.setStatus('current')
tp5000eNumofStandingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNumofStandingAlarm.setStatus('current')
tp5000eMessageGenerate = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 2, 5), ONVALUETYPE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eMessageGenerate.setStatus('current')
tp5000eGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3))
tp5000eLogFileConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 1), )
if mibBuilder.loadTexts: tp5000eLogFileConfigTable.setStatus('current')
tp5000eLogFileConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 1, 1), ).setIndexNames((0, "TP5000E", "tp5000eLogFileConfigIndex"))
if mibBuilder.loadTexts: tp5000eLogFileConfigEntry.setStatus('current')
tp5000eLogFileConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eLogFileConfigIndex.setStatus('current')
tp5000eLogFileTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eLogFileTypeName.setStatus('current')
tp5000eLogFileBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 1, 1, 3), Unsigned32().clone(100)).setUnits('Kbyte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eLogFileBufferSize.setStatus('current')
tp5000eRemoteSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 2), )
if mibBuilder.loadTexts: tp5000eRemoteSyslogTable.setStatus('current')
tp5000eRemoteSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 2, 1), ).setIndexNames((0, "TP5000E", "tp5000eRemoteSyslogIndex"))
if mibBuilder.loadTexts: tp5000eRemoteSyslogEntry.setStatus('current')
tp5000eRemoteSyslogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eRemoteSyslogIndex.setStatus('current')
tp5000eRemoteSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 2, 1, 2), EnableValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRemoteSyslogState.setStatus('current')
tp5000eRemoteSyslogAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRemoteSyslogAddr.setStatus('current')
tp5000eRedundTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 3), )
if mibBuilder.loadTexts: tp5000eRedundTable.setStatus('current')
tp5000eRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000eRedundModuleID"))
if mibBuilder.loadTexts: tp5000eRedundEntry.setStatus('current')
tp5000eRedundModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 3, 1, 1), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eRedundModuleID.setStatus('current')
tp5000eRedundModState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 3, 1, 2), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRedundModState.setStatus('current')
tp5000eRedundActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 3, 1, 3), TP5000IOCPORTID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRedundActivePort.setStatus('current')
tp5000eImageTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4), )
if mibBuilder.loadTexts: tp5000eImageTable.setStatus('current')
tp5000eImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eImageIndex"))
if mibBuilder.loadTexts: tp5000eImageEntry.setStatus('current')
tp5000eImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eImageIndex.setStatus('current')
tp5000eImageNextBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4, 1, 2), YESVALUETYPE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eImageNextBoot.setStatus('current')
tp5000eImageID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eImageID.setStatus('current')
tp5000eImageCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4, 1, 4), TP5000IMAGEACTIVE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eImageCurrState.setStatus('current')
tp5000eImageInfoMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eImageInfoMsg.setStatus('current')
tp5000eRebootTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 5), )
if mibBuilder.loadTexts: tp5000eRebootTable.setStatus('current')
tp5000eRebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eRebootIndex"))
if mibBuilder.loadTexts: tp5000eRebootEntry.setStatus('current')
tp5000eRebootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eRebootIndex.setStatus('current')
tp5000eRebootAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 5, 1, 2), ACTIONONLY()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRebootAction.setStatus('current')
tp5000eAuthRADIUSTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 6), )
if mibBuilder.loadTexts: tp5000eAuthRADIUSTable.setStatus('current')
tp5000eAuthRADIUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 6, 1), ).setIndexNames((0, "TP5000E", "tp5000eAuthRADIUSIndex"))
if mibBuilder.loadTexts: tp5000eAuthRADIUSEntry.setStatus('current')
tp5000eAuthRADIUSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eAuthRADIUSIndex.setStatus('current')
tp5000eServerRADIUSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eServerRADIUSIPAddress.setStatus('current')
tp5000eAuthRADIUSKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eAuthRADIUSKey.setStatus('current')
tp5000eAssetNum = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eAssetNum.setStatus('current')
tp5000eIntraCommIPSet = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 8), TP5000INTRAIPSET()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIntraCommIPSet.setStatus('current')
tp5000eRadiusState = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 9), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRadiusState.setStatus('current')
tp5000eLastConfig = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eLastConfig.setStatus('current')
tp5000eGlobalService = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4))
tp5000ePacketServiceTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 1), )
if mibBuilder.loadTexts: tp5000ePacketServiceTable.setStatus('current')
tp5000ePacketServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000ePacketServiceIndex"))
if mibBuilder.loadTexts: tp5000ePacketServiceEntry.setStatus('current')
tp5000ePacketServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: tp5000ePacketServiceIndex.setStatus('current')
tp5000ePacketServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 1, 1, 2), TP5000PACKETSERVICE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000ePacketServiceMode.setStatus('current')
tp5000eSSMOptionTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 2), )
if mibBuilder.loadTexts: tp5000eSSMOptionTable.setStatus('current')
tp5000eSSMOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eSSMOptionIndex"))
if mibBuilder.loadTexts: tp5000eSSMOptionEntry.setStatus('current')
tp5000eSSMOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eSSMOptionIndex.setStatus('current')
tp5000eSSMOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 2, 1, 2), TP5000SSMOPTION()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eSSMOption.setStatus('current')
tp5000ePTPClientDataTableLock = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unlocked", 0), ("locked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000ePTPClientDataTableLock.setStatus('current')
tp5000ePacketServiceExtendedMode = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notavailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000ePacketServiceExtendedMode.setStatus('current')
tp5000ePTPClientMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 5))
tp5000eReferenceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6))
tp5000eInputPQLTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6, 1), )
if mibBuilder.loadTexts: tp5000eInputPQLTable.setStatus('current')
tp5000eInputPQLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000eInputRefName"))
if mibBuilder.loadTexts: tp5000eInputPQLEntry.setStatus('current')
tp5000eInputRefName = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eInputRefName.setStatus('current')
tp5000eInputRefActualPQL = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eInputRefActualPQL.setStatus('current')
tp5000eInputRefQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6, 1, 1, 3), TP5000REFQUALIFICATION()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eInputRefQualified.setStatus('current')
tp5000eSymmMetrics = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 6, 2))
tp5000eRefConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7))
tp5000eRefTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 1), TP5000REFTIMINGMODE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRefTimingMode.setStatus('current')
tp5000eRefSelectionCriteria = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 2), TP5000REFSELECTMODE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRefSelectionCriteria.setStatus('current')
tp5000eRefConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3), )
if mibBuilder.loadTexts: tp5000eRefConfigTable.setStatus('current')
tp5000eRefConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000eRefName"))
if mibBuilder.loadTexts: tp5000eRefConfigEntry.setStatus('current')
tp5000eRefName = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eRefName.setStatus('current')
tp5000eRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3, 1, 2), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRefState.setStatus('current')
tp5000eRefPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRefPriority.setStatus('current')
tp5000eRefPQLState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3, 1, 4), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRefPQLState.setStatus('current')
tp5000eRefPQL = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eRefPQL.setStatus('current')
tp5000eClock = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8))
tp5000eClockStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 1))
tp5000eClockStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 1, 1), )
if mibBuilder.loadTexts: tp5000eClockStatusTable.setStatus('current')
tp5000eClockStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "TP5000E", "tp5000eClockStatusIndex"))
if mibBuilder.loadTexts: tp5000eClockStatusEntry.setStatus('current')
tp5000eClockStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tp5000eClockStatusIndex.setStatus('current')
tp5000eServoControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 1, 1, 1, 2), TP5000SERVOCTL()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eServoControlStatus.setStatus('current')
tp5000ePhaseOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000ePhaseOffset.setStatus('current')
tp5000eClockConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 2))
tp5000eBridgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 200000))).setUnits('Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eBridgingTime.setStatus('current')
tp5000eAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 2, 2), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eAutoSync.setStatus('current')
tp5000eSync = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eSync.setStatus('current')
tp5000eHoldoverExceededTimeQz = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eHoldoverExceededTimeQz.setStatus('current')
tp5000eHoldoverExceededTimeRb = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 8, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eHoldoverExceededTimeRb.setStatus('current')
tp5000eHardwareHierarchy = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9))
tp5000eIfTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 1), )
if mibBuilder.loadTexts: tp5000eIfTable.setStatus('current')
tp5000eIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 1, 1), ).setIndexNames((0, "TP5000E", "tp5000eIfIndex"))
if mibBuilder.loadTexts: tp5000eIfEntry.setStatus('current')
tp5000eIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIfIndex.setStatus('current')
tp5000eIfModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 1, 1, 2), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIfModuleID.setStatus('current')
tp5000eIfPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIfPortID.setStatus('current')
tp5000eIfTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIfTableIndex.setStatus('current')
tp5000eEntPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2), )
if mibBuilder.loadTexts: tp5000eEntPhysicalTable.setStatus('current')
tp5000eEntPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1), ).setIndexNames((0, "TP5000E", "tp5000eEntPhysicalIndex"))
if mibBuilder.loadTexts: tp5000eEntPhysicalEntry.setStatus('current')
tp5000eEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eEntPhysicalIndex.setStatus('current')
tp5000eEntPhysicalModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1, 2), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eEntPhysicalModuleID.setStatus('current')
tp5000eEntPhysicalStackID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eEntPhysicalStackID.setStatus('current')
tp5000eEntPhysicalChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eEntPhysicalChassisID.setStatus('current')
tp5000eEntPhysicalPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eEntPhysicalPartIndex.setStatus('current')
tp5000eEntPhysicalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eEntPhysicalTableIndex.setStatus('current')
tp5000eVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10))
tp5000eNonfixedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1), )
if mibBuilder.loadTexts: tp5000eNonfixedVlanTable.setStatus('current')
tp5000eNonfixedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1), ).setIndexNames((0, "TP5000E", "tp5000eNonfixedVlanIndex"))
if mibBuilder.loadTexts: tp5000eNonfixedVlanEntry.setStatus('current')
tp5000eNonfixedVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)))
if mibBuilder.loadTexts: tp5000eNonfixedVlanIndex.setStatus('current')
tp5000eNonfixedVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNonfixedVlanIfIndex.setStatus('current')
tp5000eNonfixedVlanModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 3), TP5000MODULEID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanModuleID.setStatus('current')
tp5000eNonfixedVlanPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanPortID.setStatus('current')
tp5000eNonfixedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanId.setStatus('current')
tp5000eNonfixedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanPriority.setStatus('current')
tp5000eNonfixedVlanIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanIPv4Addr.setStatus('current')
tp5000eNonfixedVlanNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanNetmask.setStatus('current')
tp5000eNonfixedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 9), EnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanState.setStatus('current')
tp5000eNonfixedVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eNonfixedVlanRowStatus.setStatus('current')
tp5000eFixedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2), )
if mibBuilder.loadTexts: tp5000eFixedVlanTable.setStatus('current')
tp5000eFixedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000eFixedVlanIndex"))
if mibBuilder.loadTexts: tp5000eFixedVlanEntry.setStatus('current')
tp5000eFixedVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: tp5000eFixedVlanIndex.setStatus('current')
tp5000eFixedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eFixedVlanId.setStatus('current')
tp5000eFixedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eFixedVlanPriority.setStatus('current')
tp5000eFixedVlanIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eFixedVlanIPv4Addr.setStatus('current')
tp5000eFixedVlanNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eFixedVlanNetmask.setStatus('current')
tp5000eFixedVlanGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eFixedVlanGateway.setStatus('current')
tp5000eFixedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 2, 1, 7), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eFixedVlanState.setStatus('current')
tp5000eVlanModeTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 3), )
if mibBuilder.loadTexts: tp5000eVlanModeTable.setStatus('current')
tp5000eVlanModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000eVlanModeIndex"))
if mibBuilder.loadTexts: tp5000eVlanModeEntry.setStatus('current')
tp5000eVlanModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: tp5000eVlanModeIndex.setStatus('current')
tp5000eVlanModeModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 3, 1, 2), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eVlanModeModuleID.setStatus('current')
tp5000eVlanModePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eVlanModePortID.setStatus('current')
tp5000eVlanModeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 3, 1, 4), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eVlanModeValue.setStatus('current')
tp5000eIPv6NonfixedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4), )
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanTable.setStatus('current')
tp5000eIPv6NonfixedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1), ).setIndexNames((0, "TP5000E", "tp5000eIPv6NonfixedVlanIndex"))
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanEntry.setStatus('current')
tp5000eIPv6NonfixedVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)))
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanIndex.setStatus('current')
tp5000eIPv6NonfixedVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanIfIndex.setStatus('current')
tp5000eIPv6NonfixedVlanModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 3), TP5000MODULEID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanModuleID.setStatus('current')
tp5000eIPv6NonfixedVlanPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanPortID.setStatus('current')
tp5000eIPv6NonfixedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanId.setStatus('current')
tp5000eIPv6NonfixedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanPriority.setStatus('current')
tp5000eIPv6NonfixedVlanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 7), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanAddr.setStatus('current')
tp5000eIPv6NonfixedVlanPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanPrefix.setStatus('current')
tp5000eIPv6NonfixedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 9), EnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanState.setStatus('current')
tp5000eIPv6NonfixedVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tp5000eIPv6NonfixedVlanRowStatus.setStatus('current')
tp5000eIPv6FixedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5), )
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanTable.setStatus('current')
tp5000eIPv6FixedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TP5000E", "tp5000eIPv6FixedVlanIndex"))
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanEntry.setStatus('current')
tp5000eIPv6FixedVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanIndex.setStatus('current')
tp5000eIPv6FixedVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanId.setStatus('current')
tp5000eIPv6FixedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanPriority.setStatus('current')
tp5000eIPv6FixedVlanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 4), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanAddr.setStatus('current')
tp5000eIPv6FixedVlanPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanPrefix.setStatus('current')
tp5000eIPv6FixedVlanDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 6), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanDefaultRouter.setStatus('current')
tp5000eIPv6FixedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 10, 5, 1, 7), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv6FixedVlanState.setStatus('current')
tp5000eAlarmNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11))
tp5000eNotifyElements = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1))
tp5000eNotifyModuleId = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 1), TP5000MODULEID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyModuleId.setStatus('current')
tp5000eNotifyAlarmEventID = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyAlarmEventID.setStatus('current')
tp5000eNotifyIndex = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyIndex.setStatus('current')
tp5000eNotifySeverity = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 4), ALARMLEVELTYPE()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifySeverity.setStatus('current')
tp5000eNotifyTransient = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 5), TP5000TRANSIENT()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyTransient.setStatus('current')
tp5000eNotifyDateTime = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyDateTime.setStatus('current')
tp5000eNotifyDescription = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyDescription.setStatus('current')
tp5000eNotifyClientAddr = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyClientAddr.setStatus('current')
tp5000eNotifySequenceNum = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifySequenceNum.setStatus('current')
tp5000eNotifyClientClockID = MibScalar((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eNotifyClientClockID.setStatus('current')
tp5000eTrapAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 2)).setObjects(("TP5000E", "tp5000eNotifyModuleId"), ("TP5000E", "tp5000eNotifyAlarmEventID"), ("TP5000E", "tp5000eNotifyIndex"), ("TP5000E", "tp5000eNotifySeverity"), ("TP5000E", "tp5000eNotifyTransient"), ("TP5000E", "tp5000eNotifyDateTime"), ("TP5000E", "tp5000eNotifyDescription"), ("TP5000E", "tp5000eNotifySequenceNum"))
if mibBuilder.loadTexts: tp5000eTrapAlarm.setStatus('current')
tp5000eTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 3)).setObjects(("TP5000E", "tp5000eNotifyModuleId"), ("TP5000E", "tp5000eNotifyAlarmEventID"), ("TP5000E", "tp5000eNotifyIndex"), ("TP5000E", "tp5000eNotifySeverity"), ("TP5000E", "tp5000eNotifyTransient"), ("TP5000E", "tp5000eNotifyDateTime"), ("TP5000E", "tp5000eNotifyDescription"), ("TP5000E", "tp5000eNotifySequenceNum"))
if mibBuilder.loadTexts: tp5000eTrapEvent.setStatus('current')
tp5000eClientNotification = NotificationType((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 4)).setObjects(("TP5000E", "tp5000eNotifyModuleId"), ("TP5000E", "tp5000eNotifyAlarmEventID"), ("TP5000E", "tp5000eNotifyIndex"), ("TP5000E", "tp5000eNotifySeverity"), ("TP5000E", "tp5000eNotifyTransient"), ("TP5000E", "tp5000eNotifyDateTime"), ("TP5000E", "tp5000eNotifyDescription"), ("TP5000E", "tp5000eNotifyClientAddr"), ("TP5000E", "tp5000eNotifySequenceNum"))
if mibBuilder.loadTexts: tp5000eClientNotification.setStatus('current')
tp5000ePtpMgmtEvent = NotificationType((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 11, 5)).setObjects(("TP5000E", "tp5000eNotifyModuleId"), ("TP5000E", "tp5000eNotifyAlarmEventID"), ("TP5000E", "tp5000eNotifyIndex"), ("TP5000E", "tp5000eNotifySeverity"), ("TP5000E", "tp5000eNotifyTransient"), ("TP5000E", "tp5000eNotifyDateTime"), ("TP5000E", "tp5000eNotifyDescription"), ("TP5000E", "tp5000eNotifyClientClockID"), ("TP5000E", "tp5000eNotifySequenceNum"))
if mibBuilder.loadTexts: tp5000ePtpMgmtEvent.setStatus('current')
tp5000eIPv6GlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12))
snmpIPv4IPv6ManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1), )
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerTable.setStatus('current')
snmpIPv4IPv6ManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1, 1), ).setIndexNames((0, "TP5000E", "snmpIPv4IPv6ManagerIndex"))
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerEntry.setStatus('current')
snmpIPv4IPv6ManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerIndex.setStatus('current')
snmpIPv4IPv6ManagerID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerID.setStatus('current')
snmpIPv4IPv6ManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerAddress.setStatus('current')
snmpIPv4IPv6ManagerEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerEngineID.setStatus('current')
snmpIPv4IPv6ManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpIPv4IPv6ManagerRowStatus.setStatus('current')
tp5000eIPv4IPv6RemoteSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 2), )
if mibBuilder.loadTexts: tp5000eIPv4IPv6RemoteSyslogTable.setStatus('current')
tp5000eIPv4IPv6RemoteSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 2, 1), ).setIndexNames((0, "TP5000E", "tp5000eIPv4IPv6RemoteSyslogIndex"))
if mibBuilder.loadTexts: tp5000eIPv4IPv6RemoteSyslogEntry.setStatus('current')
tp5000eIPv4IPv6RemoteSyslogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIPv4IPv6RemoteSyslogIndex.setStatus('current')
tp5000eIPv4IPv6RemoteSyslogState = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 2, 1, 2), EnableValue().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv4IPv6RemoteSyslogState.setStatus('current')
tp5000eIPv4IPv6RemoteSyslogAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv4IPv6RemoteSyslogAddr.setStatus('current')
tp5000eIPv4IPv6AuthRADIUSTable = MibTable((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 3), )
if mibBuilder.loadTexts: tp5000eIPv4IPv6AuthRADIUSTable.setStatus('current')
tp5000eIPv4IPv6AuthRADIUSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 3, 1), ).setIndexNames((0, "TP5000E", "tp5000eIPv4IPv6AuthRADIUSIndex"))
if mibBuilder.loadTexts: tp5000eIPv4IPv6AuthRADIUSEntry.setStatus('current')
tp5000eIPv4IPv6AuthRADIUSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp5000eIPv4IPv6AuthRADIUSIndex.setStatus('current')
tp5000eIPv4IPv6ServerRADIUSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv4IPv6ServerRADIUSIPAddress.setStatus('current')
tp5000eIPv4IPv6AuthRADIUSKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 12, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp5000eIPv4IPv6AuthRADIUSKey.setStatus('current')
tp5000eConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13))
if mibBuilder.loadTexts: tp5000eConformance.setStatus('current')
tp5000eCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 1))
tp5000eBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 1, 1)).setObjects(("TP5000E", "tp5000eLEDGroup"), ("TP5000E", "tp5000eHWGroup"), ("TP5000E", "tp5000eModeUpTimeGroup"), ("TP5000E", "tp5000eModWarmUpGroup"), ("TP5000E", "tp5000eModStatusGroup"), ("TP5000E", "tp5000eActiveAlarmGroup"), ("TP5000E", "tp5000eActiveEventGroup"), ("TP5000E", "tp5000eAlarmConfigGroup"), ("TP5000E", "tp5000eGeneralAlarmGroup"), ("TP5000E", "tp5000eLogFileConfigGroup"), ("TP5000E", "tp5000eRemoteSyslogGroup"), ("TP5000E", "tp5000eRedundGroup"), ("TP5000E", "tp5000eImageGroup"), ("TP5000E", "tp5000eRebootGroup"), ("TP5000E", "tp5000eRadiusGroup"), ("TP5000E", "tp5000eAssetGroup"), ("TP5000E", "tp5000ePacketServiceGroup"), ("TP5000E", "tp5000eReferenceStatusGroup"), ("TP5000E", "tp5000eReferenceConfigGroup"), ("TP5000E", "tp5000eClockStatusGroup"), ("TP5000E", "tp5000eClockConfigGroup"), ("TP5000E", "tp5000eModuleIfGroup"), ("TP5000E", "tp5000eModuleEntityGroup"), ("TP5000E", "tp5000eNotifyGroup"), ("TP5000E", "tp5000eNotificationGroup"), ("TP5000E", "tp5000eFixedVlanGroup"), ("TP5000E", "tp5000eNonfixedVlanGroup"), ("TP5000E", "tp5000eVlanModeGroup"), ("TP5000E", "tp5000eIPv4IPv6SnmpManagerGroup"), ("TP5000E", "tp5000eIPv4IPv6AuthRADIUSGroup"), ("TP5000E", "tp5000eIPv4IPv6RemoteSyslogGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eBasicCompliance = tp5000eBasicCompliance.setStatus('current')
tp5000eUocGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2))
tp5000eLEDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 1)).setObjects(("TP5000E", "tp5000eLedID"), ("TP5000E", "tp5000eLedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eLEDGroup = tp5000eLEDGroup.setStatus('current')
tp5000eHWGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 2)).setObjects(("TP5000E", "tp5000eHWStatusInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eHWGroup = tp5000eHWGroup.setStatus('current')
tp5000eModeUpTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 3)).setObjects(("TP5000E", "tp5000eModuleUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eModeUpTimeGroup = tp5000eModeUpTimeGroup.setStatus('current')
tp5000eModWarmUpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 4)).setObjects(("TP5000E", "tp5000eModWarmUpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eModWarmUpGroup = tp5000eModWarmUpGroup.setStatus('current')
tp5000eModStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 5)).setObjects(("TP5000E", "tp5000eModStatusInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eModStatusGroup = tp5000eModStatusGroup.setStatus('current')
tp5000eActiveAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 6)).setObjects(("TP5000E", "tp5000eActAlarmIndex"), ("TP5000E", "tp5000eActAlarmModID"), ("TP5000E", "tp5000eActAlarmID"), ("TP5000E", "tp5000eActAlarmDateTime"), ("TP5000E", "tp5000eActAlarmSeverity"), ("TP5000E", "tp5000eActAlarmDesc"), ("TP5000E", "tp5000eActAlarmInternalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eActiveAlarmGroup = tp5000eActiveAlarmGroup.setStatus('current')
tp5000eActiveEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 7)).setObjects(("TP5000E", "tp5000eActEventIndex"), ("TP5000E", "tp5000eActEventModID"), ("TP5000E", "tp5000eActEventID"), ("TP5000E", "tp5000eActEventInternlIndex"), ("TP5000E", "tp5000eActEventDateTime"), ("TP5000E", "tp5000eActEventDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eActiveEventGroup = tp5000eActiveEventGroup.setStatus('current')
tp5000eAlarmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 8)).setObjects(("TP5000E", "tp5000eAlarmConfigIndex"), ("TP5000E", "tp5000eAlarmConfigAID"), ("TP5000E", "tp5000eAlarmLevelSetting"), ("TP5000E", "tp5000eAlarmSettingDelay"), ("TP5000E", "tp5000eEnableAlarmState"), ("TP5000E", "tp5000eAlarmConfigDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eAlarmConfigGroup = tp5000eAlarmConfigGroup.setStatus('current')
tp5000eGeneralAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 9)).setObjects(("TP5000E", "tp5000eNumofStandingAlarm"), ("TP5000E", "tp5000eMessageGenerate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eGeneralAlarmGroup = tp5000eGeneralAlarmGroup.setStatus('current')
tp5000eLogFileConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 10)).setObjects(("TP5000E", "tp5000eLogFileConfigIndex"), ("TP5000E", "tp5000eLogFileTypeName"), ("TP5000E", "tp5000eLogFileBufferSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eLogFileConfigGroup = tp5000eLogFileConfigGroup.setStatus('current')
tp5000eRemoteSyslogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 11)).setObjects(("TP5000E", "tp5000eRemoteSyslogIndex"), ("TP5000E", "tp5000eRemoteSyslogState"), ("TP5000E", "tp5000eRemoteSyslogAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eRemoteSyslogGroup = tp5000eRemoteSyslogGroup.setStatus('current')
tp5000eRedundGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 12)).setObjects(("TP5000E", "tp5000eRedundModuleID"), ("TP5000E", "tp5000eRedundModState"), ("TP5000E", "tp5000eRedundActivePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eRedundGroup = tp5000eRedundGroup.setStatus('current')
tp5000eImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 13)).setObjects(("TP5000E", "tp5000eImageID"), ("TP5000E", "tp5000eImageNextBoot"), ("TP5000E", "tp5000eImageCurrState"), ("TP5000E", "tp5000eImageInfoMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eImageGroup = tp5000eImageGroup.setStatus('current')
tp5000eRebootGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 15)).setObjects(("TP5000E", "tp5000eRebootAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eRebootGroup = tp5000eRebootGroup.setStatus('current')
tp5000eRadiusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 16)).setObjects(("TP5000E", "tp5000eAuthRADIUSIndex"), ("TP5000E", "tp5000eServerRADIUSIPAddress"), ("TP5000E", "tp5000eAuthRADIUSKey"), ("TP5000E", "tp5000eRadiusState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eRadiusGroup = tp5000eRadiusGroup.setStatus('current')
tp5000eAssetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 17)).setObjects(("TP5000E", "tp5000eAssetNum"), ("TP5000E", "tp5000eIntraCommIPSet"), ("TP5000E", "tp5000eSSMOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eAssetGroup = tp5000eAssetGroup.setStatus('current')
tp5000ePacketServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 18)).setObjects(("TP5000E", "tp5000ePacketServiceMode"), ("TP5000E", "tp5000ePTPClientDataTableLock"), ("TP5000E", "tp5000ePacketServiceExtendedMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000ePacketServiceGroup = tp5000ePacketServiceGroup.setStatus('current')
tp5000eReferenceStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 19)).setObjects(("TP5000E", "tp5000eInputRefName"), ("TP5000E", "tp5000eInputRefActualPQL"), ("TP5000E", "tp5000eInputRefQualified"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eReferenceStatusGroup = tp5000eReferenceStatusGroup.setStatus('current')
tp5000eReferenceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 20)).setObjects(("TP5000E", "tp5000eRefTimingMode"), ("TP5000E", "tp5000eRefSelectionCriteria"), ("TP5000E", "tp5000eRefName"), ("TP5000E", "tp5000eRefState"), ("TP5000E", "tp5000eRefPriority"), ("TP5000E", "tp5000eRefPQLState"), ("TP5000E", "tp5000eRefPQL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eReferenceConfigGroup = tp5000eReferenceConfigGroup.setStatus('current')
tp5000eClockStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 21)).setObjects(("TP5000E", "tp5000ePhaseOffset"), ("TP5000E", "tp5000eServoControlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eClockStatusGroup = tp5000eClockStatusGroup.setStatus('current')
tp5000eClockConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 22)).setObjects(("TP5000E", "tp5000eBridgingTime"), ("TP5000E", "tp5000eAutoSync"), ("TP5000E", "tp5000eSync"), ("TP5000E", "tp5000eHoldoverExceededTimeQz"), ("TP5000E", "tp5000eHoldoverExceededTimeRb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eClockConfigGroup = tp5000eClockConfigGroup.setStatus('current')
tp5000eModuleIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 23)).setObjects(("TP5000E", "tp5000eIfIndex"), ("TP5000E", "tp5000eIfModuleID"), ("TP5000E", "tp5000eIfPortID"), ("TP5000E", "tp5000eIfTableIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eModuleIfGroup = tp5000eModuleIfGroup.setStatus('current')
tp5000eModuleEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 24)).setObjects(("TP5000E", "tp5000eEntPhysicalIndex"), ("TP5000E", "tp5000eEntPhysicalModuleID"), ("TP5000E", "tp5000eEntPhysicalStackID"), ("TP5000E", "tp5000eEntPhysicalChassisID"), ("TP5000E", "tp5000eEntPhysicalPartIndex"), ("TP5000E", "tp5000eEntPhysicalTableIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eModuleEntityGroup = tp5000eModuleEntityGroup.setStatus('current')
tp5000eFixedVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 25)).setObjects(("TP5000E", "tp5000eFixedVlanId"), ("TP5000E", "tp5000eFixedVlanPriority"), ("TP5000E", "tp5000eFixedVlanIPv4Addr"), ("TP5000E", "tp5000eFixedVlanNetmask"), ("TP5000E", "tp5000eFixedVlanGateway"), ("TP5000E", "tp5000eFixedVlanState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eFixedVlanGroup = tp5000eFixedVlanGroup.setStatus('current')
tp5000eNonfixedVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 26)).setObjects(("TP5000E", "tp5000eNonfixedVlanIfIndex"), ("TP5000E", "tp5000eNonfixedVlanModuleID"), ("TP5000E", "tp5000eNonfixedVlanPortID"), ("TP5000E", "tp5000eNonfixedVlanId"), ("TP5000E", "tp5000eNonfixedVlanPriority"), ("TP5000E", "tp5000eNonfixedVlanIPv4Addr"), ("TP5000E", "tp5000eNonfixedVlanNetmask"), ("TP5000E", "tp5000eNonfixedVlanRowStatus"), ("TP5000E", "tp5000eNonfixedVlanState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eNonfixedVlanGroup = tp5000eNonfixedVlanGroup.setStatus('current')
tp5000eNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 27)).setObjects(("TP5000E", "tp5000eNotifyModuleId"), ("TP5000E", "tp5000eNotifyAlarmEventID"), ("TP5000E", "tp5000eNotifyIndex"), ("TP5000E", "tp5000eNotifySeverity"), ("TP5000E", "tp5000eNotifyTransient"), ("TP5000E", "tp5000eNotifyDateTime"), ("TP5000E", "tp5000eNotifyDescription"), ("TP5000E", "tp5000eNotifyClientAddr"), ("TP5000E", "tp5000eNotifySequenceNum"), ("TP5000E", "tp5000eNotifyClientClockID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eNotifyGroup = tp5000eNotifyGroup.setStatus('current')
tp5000eNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 28)).setObjects(("TP5000E", "tp5000eTrapAlarm"), ("TP5000E", "tp5000eTrapEvent"), ("TP5000E", "tp5000eClientNotification"), ("TP5000E", "tp5000ePtpMgmtEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eNotificationGroup = tp5000eNotificationGroup.setStatus('current')
tp5000eVlanModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 29)).setObjects(("TP5000E", "tp5000eVlanModeModuleID"), ("TP5000E", "tp5000eVlanModeValue"), ("TP5000E", "tp5000eVlanModePortID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eVlanModeGroup = tp5000eVlanModeGroup.setStatus('current')
tp5000eLastConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 30)).setObjects(("TP5000E", "tp5000eLastConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eLastConfigGroup = tp5000eLastConfigGroup.setStatus('current')
tp5000eIPv6NonfixedVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 31)).setObjects(("TP5000E", "tp5000eIPv6NonfixedVlanIfIndex"), ("TP5000E", "tp5000eIPv6NonfixedVlanModuleID"), ("TP5000E", "tp5000eIPv6NonfixedVlanPortID"), ("TP5000E", "tp5000eIPv6NonfixedVlanId"), ("TP5000E", "tp5000eIPv6NonfixedVlanPriority"), ("TP5000E", "tp5000eIPv6NonfixedVlanAddr"), ("TP5000E", "tp5000eIPv6NonfixedVlanPrefix"), ("TP5000E", "tp5000eIPv6NonfixedVlanState"), ("TP5000E", "tp5000eIPv6NonfixedVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eIPv6NonfixedVlanGroup = tp5000eIPv6NonfixedVlanGroup.setStatus('current')
tp5000eIPv6FixedVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 32)).setObjects(("TP5000E", "tp5000eIPv6FixedVlanId"), ("TP5000E", "tp5000eIPv6FixedVlanPriority"), ("TP5000E", "tp5000eIPv6FixedVlanAddr"), ("TP5000E", "tp5000eIPv6FixedVlanPrefix"), ("TP5000E", "tp5000eIPv6FixedVlanDefaultRouter"), ("TP5000E", "tp5000eIPv6FixedVlanState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eIPv6FixedVlanGroup = tp5000eIPv6FixedVlanGroup.setStatus('current')
tp5000eIPv4IPv6SnmpManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 33)).setObjects(("TP5000E", "snmpIPv4IPv6ManagerID"), ("TP5000E", "snmpIPv4IPv6ManagerAddress"), ("TP5000E", "snmpIPv4IPv6ManagerEngineID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eIPv4IPv6SnmpManagerGroup = tp5000eIPv4IPv6SnmpManagerGroup.setStatus('current')
tp5000eIPv4IPv6RemoteSyslogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 34)).setObjects(("TP5000E", "tp5000eIPv4IPv6RemoteSyslogState"), ("TP5000E", "tp5000eIPv4IPv6RemoteSyslogAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eIPv4IPv6RemoteSyslogGroup = tp5000eIPv4IPv6RemoteSyslogGroup.setStatus('current')
tp5000eIPv4IPv6AuthRADIUSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9070, 1, 2, 5, 7, 1, 13, 2, 35)).setObjects(("TP5000E", "tp5000eIPv4IPv6ServerRADIUSIPAddress"), ("TP5000E", "tp5000eIPv4IPv6AuthRADIUSKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tp5000eIPv4IPv6AuthRADIUSGroup = tp5000eIPv4IPv6AuthRADIUSGroup.setStatus('current')
mibBuilder.exportSymbols("TP5000E", tp5000eHWStatusIndex=tp5000eHWStatusIndex, tp5000eModStatusTable=tp5000eModStatusTable, tp5000eFixedVlanGroup=tp5000eFixedVlanGroup, tp5000ePacketServiceIndex=tp5000ePacketServiceIndex, tp5000eHoldoverExceededTimeQz=tp5000eHoldoverExceededTimeQz, tp5000eNotifyTransient=tp5000eNotifyTransient, TP5000IOTYPE=TP5000IOTYPE, tp5000eCompliances=tp5000eCompliances, tp5000eModStatusGroup=tp5000eModStatusGroup, tp5000eModeUpTimeGroup=tp5000eModeUpTimeGroup, tp5000eModWarmUpEntry=tp5000eModWarmUpEntry, tp5000eLogFileConfigEntry=tp5000eLogFileConfigEntry, tp5000eLedStatus=tp5000eLedStatus, tp5000eActAlarmModID=tp5000eActAlarmModID, tp5000eLastConfig=tp5000eLastConfig, TSsm=TSsm, tp5000eActiveEventGroup=tp5000eActiveEventGroup, tp5000eImageEntry=tp5000eImageEntry, tp5000eModUpTimeIndex=tp5000eModUpTimeIndex, tp5000eEntPhysicalPartIndex=tp5000eEntPhysicalPartIndex, tp5000eRefPriority=tp5000eRefPriority, tp5000eIPv6FixedVlanPrefix=tp5000eIPv6FixedVlanPrefix, tp5000eActEventEntry=tp5000eActEventEntry, tp5000eFixedVlanId=tp5000eFixedVlanId, tp5000eRemoteSyslogGroup=tp5000eRemoteSyslogGroup, tp5000eSystemStatus=tp5000eSystemStatus, tp5000eHWGroup=tp5000eHWGroup, tp5000eNonfixedVlanNetmask=tp5000eNonfixedVlanNetmask, tp5000eGlobalConfig=tp5000eGlobalConfig, tp5000eSSMOption=tp5000eSSMOption, tp5000eInputPQLEntry=tp5000eInputPQLEntry, tp5000eModWarmUpGroup=tp5000eModWarmUpGroup, tp5000eRedundModState=tp5000eRedundModState, tp5000eImageID=tp5000eImageID, tp5000eFixedVlanGateway=tp5000eFixedVlanGateway, tp5000eEntPhysicalIndex=tp5000eEntPhysicalIndex, tp5000eIPv4IPv6ServerRADIUSIPAddress=tp5000eIPv4IPv6ServerRADIUSIPAddress, tp5000eFixedVlanTable=tp5000eFixedVlanTable, tp5000eRefConfig=tp5000eRefConfig, tp5000eIPv6NonfixedVlanId=tp5000eIPv6NonfixedVlanId, tp5000eModuleEntityGroup=tp5000eModuleEntityGroup, tp5000eActAlarmID=tp5000eActAlarmID, tp5000eIPv4IPv6RemoteSyslogState=tp5000eIPv4IPv6RemoteSyslogState, tp5000eBridgingTime=tp5000eBridgingTime, tp5000eNonfixedVlanGroup=tp5000eNonfixedVlanGroup, tp5000eHoldoverExceededTimeRb=tp5000eHoldoverExceededTimeRb, tp5000eRefState=tp5000eRefState, tp5000eLogFileBufferSize=tp5000eLogFileBufferSize, tp5000eModStatusInfo=tp5000eModStatusInfo, tp5000eActAlarmDateTime=tp5000eActAlarmDateTime, tp5000eLogFileConfigTable=tp5000eLogFileConfigTable, tp5000eHardwareHierarchy=tp5000eHardwareHierarchy, tp5000eNonfixedVlanState=tp5000eNonfixedVlanState, TLatAndLon=TLatAndLon, tp5000ePacketServiceTable=tp5000ePacketServiceTable, tp5000eIfPortID=tp5000eIfPortID, tp5000eNotifyClientAddr=tp5000eNotifyClientAddr, tp5000eRedundGroup=tp5000eRedundGroup, tp5000eVlanModeGroup=tp5000eVlanModeGroup, tp5000eEntPhysicalChassisID=tp5000eEntPhysicalChassisID, tp5000eInputRefName=tp5000eInputRefName, tp5000eClockStatusTable=tp5000eClockStatusTable, tp5000eIPv6FixedVlanPriority=tp5000eIPv6FixedVlanPriority, tp5000eConformance=tp5000eConformance, tp5000eFixedVlanIndex=tp5000eFixedVlanIndex, TAntHeight=TAntHeight, tp5000eRebootIndex=tp5000eRebootIndex, tp5000eIPv4IPv6AuthRADIUSEntry=tp5000eIPv4IPv6AuthRADIUSEntry, tp5000eModUpTimeTable=tp5000eModUpTimeTable, tp5000eRadiusState=tp5000eRadiusState, tp5000eIPv6FixedVlanEntry=tp5000eIPv6FixedVlanEntry, tp5000eActiveAlarmGroup=tp5000eActiveAlarmGroup, tp5000eIntraCommIPSet=tp5000eIntraCommIPSet, tp5000eClockStatusIndex=tp5000eClockStatusIndex, tp5000eReferenceStatusGroup=tp5000eReferenceStatusGroup, TP5000IOCPORTID=TP5000IOCPORTID, tp5000eIPv6NonfixedVlanAddr=tp5000eIPv6NonfixedVlanAddr, tp5000eActEventModID=tp5000eActEventModID, tp5000eRebootEntry=tp5000eRebootEntry, tp5000eActAlarmSeverity=tp5000eActAlarmSeverity, tp5000eReferenceStatus=tp5000eReferenceStatus, tp5000eActEventID=tp5000eActEventID, tp5000eActEventDateTime=tp5000eActEventDateTime, tp5000eNonfixedVlanIndex=tp5000eNonfixedVlanIndex, tp5000eSync=tp5000eSync, tp5000eVlanModePortID=tp5000eVlanModePortID, tp5000eNotifyClientClockID=tp5000eNotifyClientClockID, tp5000eNonfixedVlanIfIndex=tp5000eNonfixedVlanIfIndex, PYSNMP_MODULE_ID=tp5000e, TP5000SSMVALUE=TP5000SSMVALUE, tp5000eInputRefQualified=tp5000eInputRefQualified, tp5000eModWarmUpStatus=tp5000eModWarmUpStatus, TP5000SSMOPTION=TP5000SSMOPTION, tp5000eMessageGenerate=tp5000eMessageGenerate, tp5000eIfEntry=tp5000eIfEntry, tp5000eFixedVlanIPv4Addr=tp5000eFixedVlanIPv4Addr, tp5000eEntPhysicalEntry=tp5000eEntPhysicalEntry, snmpIPv4IPv6ManagerRowStatus=snmpIPv4IPv6ManagerRowStatus, tp5000eNonfixedVlanEntry=tp5000eNonfixedVlanEntry, TP5000REFTIMINGMODE=TP5000REFTIMINGMODE, TP5000REFSELECTMODE=TP5000REFSELECTMODE, tp5000eAssetGroup=tp5000eAssetGroup, tp5000ePacketServiceGroup=tp5000ePacketServiceGroup, tp5000ePacketServiceExtendedMode=tp5000ePacketServiceExtendedMode, tp5000eIfModuleID=tp5000eIfModuleID, tp5000ePacketServiceEntry=tp5000ePacketServiceEntry, snmpIPv4IPv6ManagerID=snmpIPv4IPv6ManagerID, tp5000eRemoteSyslogState=tp5000eRemoteSyslogState, DateAndTime=DateAndTime, tp5000eImageIndex=tp5000eImageIndex, tp5000eImageNextBoot=tp5000eImageNextBoot, tp5000eNotifySequenceNum=tp5000eNotifySequenceNum, tp5000eIPv6NonfixedVlanEntry=tp5000eIPv6NonfixedVlanEntry, tp5000eAlarmConfigTable=tp5000eAlarmConfigTable, tp5000eIPv6NonfixedVlanModuleID=tp5000eIPv6NonfixedVlanModuleID, snmpIPv4IPv6ManagerEngineID=snmpIPv4IPv6ManagerEngineID, TP5000REFQUALIFICATION=TP5000REFQUALIFICATION, tp5000eHWStatusInfo=tp5000eHWStatusInfo, tp5000eClientNotification=tp5000eClientNotification, snmpIPv4IPv6ManagerEntry=snmpIPv4IPv6ManagerEntry, tp5000ePTPClientMgmt=tp5000ePTPClientMgmt, tp5000eEntPhysicalStackID=tp5000eEntPhysicalStackID, tp5000eAlarmLevelSetting=tp5000eAlarmLevelSetting, tp5000eNotifyGroup=tp5000eNotifyGroup, tp5000eNotifySeverity=tp5000eNotifySeverity, tp5000eRebootAction=tp5000eRebootAction, snmpIPv4IPv6ManagerIndex=snmpIPv4IPv6ManagerIndex, tp5000eVlanModeIndex=tp5000eVlanModeIndex, tp5000eNonfixedVlanPortID=tp5000eNonfixedVlanPortID, tp5000eHWStatusEntry=tp5000eHWStatusEntry, tp5000eAlarmNotification=tp5000eAlarmNotification, tp5000eActAlarmEntry=tp5000eActAlarmEntry, tp5000eIPv4IPv6SnmpManagerGroup=tp5000eIPv4IPv6SnmpManagerGroup, TP5000INTRAIPSET=TP5000INTRAIPSET, tp5000eUocGroups=tp5000eUocGroups, TLocalTimeOffset=TLocalTimeOffset, tp5000eAlarmConfigGroup=tp5000eAlarmConfigGroup, tp5000eAlarmConfigAID=tp5000eAlarmConfigAID, tp5000eIPv4IPv6RemoteSyslogAddr=tp5000eIPv4IPv6RemoteSyslogAddr, snmpIPv4IPv6ManagerAddress=snmpIPv4IPv6ManagerAddress, tp5000eLogFileConfigGroup=tp5000eLogFileConfigGroup, tp5000eLastConfigGroup=tp5000eLastConfigGroup, tp5000eActEventInternlIndex=tp5000eActEventInternlIndex, tp5000eRedundTable=tp5000eRedundTable, tp5000eRemoteSyslogAddr=tp5000eRemoteSyslogAddr, tp5000eClockStatus=tp5000eClockStatus, tp5000eClockConfig=tp5000eClockConfig, tp5000eAlarmSettingDelay=tp5000eAlarmSettingDelay, tp5000eEnableAlarmState=tp5000eEnableAlarmState, tp5000eRedundEntry=tp5000eRedundEntry, tp5000eInputPQLTable=tp5000eInputPQLTable, tp5000eIPv6NonfixedVlanState=tp5000eIPv6NonfixedVlanState, tp5000eIPv6FixedVlanDefaultRouter=tp5000eIPv6FixedVlanDefaultRouter, tp5000ePTPClientDataTableLock=tp5000ePTPClientDataTableLock, tp5000eReferenceConfigGroup=tp5000eReferenceConfigGroup, tp5000eNotifyModuleId=tp5000eNotifyModuleId, tp5000eLedTable=tp5000eLedTable, tp5000eIPv6FixedVlanIndex=tp5000eIPv6FixedVlanIndex, tp5000eModUpTimeEntry=tp5000eModUpTimeEntry, tp5000eRefName=tp5000eRefName, tp5000eLogFileTypeName=tp5000eLogFileTypeName, tp5000eImageInfoMsg=tp5000eImageInfoMsg, tp5000eAuthRADIUSIndex=tp5000eAuthRADIUSIndex, tp5000eServerRADIUSIPAddress=tp5000eServerRADIUSIPAddress, tp5000eSSMOptionTable=tp5000eSSMOptionTable, tp5000eIfTableIndex=tp5000eIfTableIndex, tp5000eNonfixedVlanTable=tp5000eNonfixedVlanTable, tp5000eActAlarmIndex=tp5000eActAlarmIndex, tp5000eIPv6FixedVlanId=tp5000eIPv6FixedVlanId, tp5000eIPv4IPv6RemoteSyslogIndex=tp5000eIPv4IPv6RemoteSyslogIndex, tp5000eImageCurrState=tp5000eImageCurrState, tp5000eRefPQL=tp5000eRefPQL, tp5000eSSMOptionIndex=tp5000eSSMOptionIndex, tp5000eFixedVlanPriority=tp5000eFixedVlanPriority, tp5000eSymmMetrics=tp5000eSymmMetrics, tp5000eAutoSync=tp5000eAutoSync, tp5000eIPv6NonfixedVlanTable=tp5000eIPv6NonfixedVlanTable, tp5000eIPv6NonfixedVlanRowStatus=tp5000eIPv6NonfixedVlanRowStatus, tp5000eTrapEvent=tp5000eTrapEvent, ALARMLEVELTYPE=ALARMLEVELTYPE, tp5000eNotifyIndex=tp5000eNotifyIndex, tp5000eBasicCompliance=tp5000eBasicCompliance, tp5000eClockStatusGroup=tp5000eClockStatusGroup, tp5000eModuleUpTime=tp5000eModuleUpTime, tp5000eIPv6NonfixedVlanPrefix=tp5000eIPv6NonfixedVlanPrefix, tp5000eIPv6NonfixedVlanIfIndex=tp5000eIPv6NonfixedVlanIfIndex, tp5000eRefPQLState=tp5000eRefPQLState, tp5000eAuthRADIUSKey=tp5000eAuthRADIUSKey, tp5000eIPv6NonfixedVlanPriority=tp5000eIPv6NonfixedVlanPriority, tp5000eIPv4IPv6AuthRADIUSIndex=tp5000eIPv4IPv6AuthRADIUSIndex, tp5000eIPv4IPv6AuthRADIUSKey=tp5000eIPv4IPv6AuthRADIUSKey, tp5000eLedEntry=tp5000eLedEntry, tp5000eRedundActivePort=tp5000eRedundActivePort, tp5000eNotifyElements=tp5000eNotifyElements, tp5000eAlarmAndEvent=tp5000eAlarmAndEvent, tp5000eAssetNum=tp5000eAssetNum, tp5000eVlanModeValue=tp5000eVlanModeValue, TP5000SERVOCTL=TP5000SERVOCTL, tp5000eRemoteSyslogIndex=tp5000eRemoteSyslogIndex, tp5000eIPv6FixedVlanAddr=tp5000eIPv6FixedVlanAddr, tp5000eLogFileConfigIndex=tp5000eLogFileConfigIndex, tp5000eNotifyDescription=tp5000eNotifyDescription, TP5000IMAGEACTIVE=TP5000IMAGEACTIVE, TP5000IOPORTID=TP5000IOPORTID, tp5000eAlarmConfigDesc=tp5000eAlarmConfigDesc, tp5000eGeneralAlarmGroup=tp5000eGeneralAlarmGroup, tp5000eRadiusGroup=tp5000eRadiusGroup, tp5000eRefTimingMode=tp5000eRefTimingMode, tp5000eRefConfigEntry=tp5000eRefConfigEntry, tp5000eModStatusIndex=tp5000eModStatusIndex, tp5000eVlanModeEntry=tp5000eVlanModeEntry, TP5000PACKETSERVICE=TP5000PACKETSERVICE, tp5000eLEDGroup=tp5000eLEDGroup, tp5000eImageGroup=tp5000eImageGroup, tp5000eNotifyDateTime=tp5000eNotifyDateTime, tp5000eIPv6NonfixedVlanIndex=tp5000eIPv6NonfixedVlanIndex, tp5000eRefSelectionCriteria=tp5000eRefSelectionCriteria, tp5000eActEventTable=tp5000eActEventTable, tp5000eNotifyAlarmEventID=tp5000eNotifyAlarmEventID, tp5000eFixedVlanNetmask=tp5000eFixedVlanNetmask, tp5000eVlanModeModuleID=tp5000eVlanModeModuleID, tp5000eAuthRADIUSEntry=tp5000eAuthRADIUSEntry, tp5000eIPv4IPv6AuthRADIUSGroup=tp5000eIPv4IPv6AuthRADIUSGroup, TP5000TRANSIENT=TP5000TRANSIENT, tp5000eEntPhysicalTable=tp5000eEntPhysicalTable, tp5000eNonfixedVlanRowStatus=tp5000eNonfixedVlanRowStatus, tp5000eNumofStandingAlarm=tp5000eNumofStandingAlarm, tp5000eLedID=tp5000eLedID, tp5000eImageTable=tp5000eImageTable, tp5000eInputRefActualPQL=tp5000eInputRefActualPQL, tp5000ePhaseOffset=tp5000ePhaseOffset, tp5000e=tp5000e, tp5000eServoControlStatus=tp5000eServoControlStatus, tp5000eNonfixedVlanIPv4Addr=tp5000eNonfixedVlanIPv4Addr, tp5000eActEventDesc=tp5000eActEventDesc, tp5000eNonfixedVlanModuleID=tp5000eNonfixedVlanModuleID, tp5000eRebootTable=tp5000eRebootTable, TP5000LEDTYPE=TP5000LEDTYPE, tp5000eEntPhysicalModuleID=tp5000eEntPhysicalModuleID, tp5000eIPv6GlobalConfig=tp5000eIPv6GlobalConfig, tp5000eEntPhysicalTableIndex=tp5000eEntPhysicalTableIndex, tp5000eClockConfigGroup=tp5000eClockConfigGroup, tp5000eVlanConfig=tp5000eVlanConfig, tp5000eActAlarmDesc=tp5000eActAlarmDesc, tp5000eAlarmConfigIndex=tp5000eAlarmConfigIndex, tp5000eIfTable=tp5000eIfTable, tp5000eRemoteSyslogTable=tp5000eRemoteSyslogTable, tp5000eModStatusEntry=tp5000eModStatusEntry, tp5000eRemoteSyslogEntry=tp5000eRemoteSyslogEntry, tp5000eActAlarmTable=tp5000eActAlarmTable, tp5000eIPv6NonfixedVlanPortID=tp5000eIPv6NonfixedVlanPortID, tp5000eNotificationGroup=tp5000eNotificationGroup, tp5000eAlarmConfigEntry=tp5000eAlarmConfigEntry, tp5000eIPv6NonfixedVlanGroup=tp5000eIPv6NonfixedVlanGroup)
mibBuilder.exportSymbols("TP5000E", tp5000eIPv4IPv6RemoteSyslogEntry=tp5000eIPv4IPv6RemoteSyslogEntry, tp5000eFixedVlanState=tp5000eFixedVlanState, tp5000eActAlarmInternalIndex=tp5000eActAlarmInternalIndex, TP5000LEDID=TP5000LEDID, tp5000eModuleIfGroup=tp5000eModuleIfGroup, tp5000eIPv4IPv6RemoteSyslogGroup=tp5000eIPv4IPv6RemoteSyslogGroup, tp5000eModWarmUpTable=tp5000eModWarmUpTable, tp5000eIPv6FixedVlanGroup=tp5000eIPv6FixedVlanGroup, snmpIPv4IPv6ManagerTable=snmpIPv4IPv6ManagerTable, tp5000eSSMOptionEntry=tp5000eSSMOptionEntry, tp5000eIPv4IPv6RemoteSyslogTable=tp5000eIPv4IPv6RemoteSyslogTable, tp5000eAuthRADIUSTable=tp5000eAuthRADIUSTable, tp5000ePacketServiceMode=tp5000ePacketServiceMode, tp5000eVlanModeTable=tp5000eVlanModeTable, tp5000eTrapAlarm=tp5000eTrapAlarm, tp5000eClock=tp5000eClock, tp5000eIPv4IPv6AuthRADIUSTable=tp5000eIPv4IPv6AuthRADIUSTable, tp5000eIfIndex=tp5000eIfIndex, tp5000eRefConfigTable=tp5000eRefConfigTable, tp5000eNonfixedVlanId=tp5000eNonfixedVlanId, tp5000eRedundModuleID=tp5000eRedundModuleID, tp5000eNonfixedVlanPriority=tp5000eNonfixedVlanPriority, tp5000eFixedVlanEntry=tp5000eFixedVlanEntry, tp5000eRebootGroup=tp5000eRebootGroup, tp5000eClockStatusEntry=tp5000eClockStatusEntry, tp5000ePtpMgmtEvent=tp5000ePtpMgmtEvent, tp5000eModWarmUpIndex=tp5000eModWarmUpIndex, tp5000eIPv6FixedVlanTable=tp5000eIPv6FixedVlanTable, tp5000eActEventIndex=tp5000eActEventIndex, tp5000eHWStatusTable=tp5000eHWStatusTable, tp5000eIPv6FixedVlanState=tp5000eIPv6FixedVlanState, tp5000eGlobalService=tp5000eGlobalService)
